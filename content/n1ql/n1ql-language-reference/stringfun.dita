<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_12"  xml:lang="en-US">
  <title>String Functions</title>
  <conbody >
    <p>String functions perform operations on a string input value and returns a string or other value. </p>
    <section id="fn-str-contains"><title>CONTAINS(expression, substring)</title>
      <p>True if the string contains the substring.</p>
    </section>
    <section id="fn-str-initcap"><title>INITCAP(expression), TITLE(expression)</title>
      <p>Converts the string so that the first letter of each word is uppercase and every other letter is 
        lowercase.</p>
    </section>
    
    <section id="fn-str-length"><title>LENGTH(expression)</title>
      <p>Returns length of the string value.</p>
    </section>
    <section id="fn-str-lower"><title>LOWER(expression)</title>
      <p>Returns lowercase of the string value.</p>
    </section>
    <section id="fn-str-ltrim"><title>LTRIM(expression [, characters ])</title>
      <p>Returns string with all leading characters removed. White space is trimmed by default. The
        function removes leading characters from the expression that match the specified characters
        and stops when it encounters a character that does not match any of the specified characters. </p>
    </section>
    <section id="fn-str-position"><title>POSITION(expression, substring)</title>
      <p>Returns the first position of the substring within the string, or -1. The position is
        zero-based, i.e., the first position is 0.</p>
    </section>
    <section id="fn-str-repeat"><title>REPEAT(expression, n)</title>
      <p>Returns string formed by repeating expression n times.</p> 
    </section>
    <section id="fn-str-replace"><title>REPLACE(expression, substring, repl [, n ])</title>
      <p>Returns string with all occurrences of substr replaced with repl. If n is given, at most n replacements
        are performed.</p>
    </section>   
    <section id="fn-str-reverse"><title>REVERSE(expression)</title>
      <p>This function reverses a given string.</p>
      <codeblock spectitle="Example" outputclass="language-json">SELECT REVERSE("won thgiarts ma I");
[ 
  {    
    "$1": "I am straight now"  
  }
]</codeblock>
    </section>
    <section id="fn-str-rtrim"><title>RTRIM(expression, [, characters ])</title>
      <p>Returns string with all trailing characters removed. White space is trimmed by default. The
        function removes trailing characters from the expression that match the specified characters
        and stops when it encounters a character that does not match any of the specified characters.
        <codeblock>select rtrim("2013-06-22 18:33:30 330+0300", "+03") ;
          
          "results": [
          {
          "$1": "2013-06-22 18:33:30 "
          }
          
          select rtrim("2013-06-22 18:33:30 330+0300", " +03") ;
          
          "results": [
          {
          "$1": "2013-06-22 18:33:"
          }</codeblock></p>
    </section>
    <section id="fn-str-split"><title>SPLIT(expression [, sep ])</title>
      <p>Splits the string into an array of substrings separated by the specified separator
        <userinput>sep</userinput>. If <userinput>sep</userinput> is not given, any combination of
        white space characters is used.</p>
    </section>
    <section id="fn-str-substr"><title>SUBSTR(expression, position [, length ])</title>
      <p>Returns substring from the integer position of the given length, or to the end of the string. 
        The position is zero-based, i.e. the first position is 0. If position is negative, it is counted 
        from the end of the string; -1 is the last position in the string.</p>
    </section>   
    <section id="fn-str-suffixes"><title>SUFFIXES(expression)</title>
      <p><i>Since Couchbase Server 4.5</i></p>
      <p>Generates an array of all the suffixes of the input string. </p>
      <p>Example</p>
      <p>The following example uses the SUFFIXES() function to query the airport names when a partial
        airport name is given.
        <codeblock spectitle="Create Index">CREATE INDEX autocomplete_airport_name 
          ON `travel-sample`( DISTINCT ARRAY array_element FOR array_element IN SUFFIXES(LOWER(airportname)) END )
          WHERE type = "airport";</codeblock><codeblock spectitle="Query">SELECT airportname 
            FROM `travel-sample`
            WHERE
            ANY array_element IN SUFFIXES(LOWER(airportname)) SATISFIES array_element LIKE 'washing%' END
            AND type="airport";</codeblock><codeblock spectitle="Results">[
              {
              "airportname": "Washington Dulles Intl"
              },
              {
              "airportname": "Baltimore Washington Intl"
              },
              {
              "airportname": "Ronald Reagan Washington Natl"
              },
              {
              "airportname": "Washington Union Station"
              }
              ]</codeblock></p>
      <p>The following <xref
        href="https://dzone.com/articles/a-couchbase-index-technique-for-like-predicates-wi"
        format="html" scope="external">blog</xref> provides more information about this example.</p>
    </section>
    <section id="fn-str-title"><title>TITLE(expression), INITCAP(expression)</title>
      <p>Converts the string so that the first letter of each word is uppercase and every other letter is 
        lowercase.</p>
    </section>
    <section id="fn-str-token">
      <title>TOKENS()</title>
      <p>This function tokenizes the given input string based on specified delimiters, and other
        options. It recursively enumerates all tokens in a JSON value and returns an array of values
        (JSON atomic values) as the result.</p>
      <p>The following table lists the rules for each JSON type: <table frame="all" rowsep="1"
          colsep="1" id="table_gy4_jhg_gy">
          <tgroup cols="2">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>JSON Type</entry>
                <entry>Return Value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>MISSING</entry>
                <entry>[]</entry>
              </row>
              <row>
                <entry>NULL</entry>
                <entry>[NULL]</entry>
              </row>
              <row>
                <entry>false</entry>
                <entry>[false]</entry>
              </row>
              <row>
                <entry>true</entry>
                <entry>[true]</entry>
              </row>
              <row>
                <entry>number</entry>
                <entry>[number]</entry>
              </row>
              <row>
                <entry>string</entry>
                <entry>SPLIT(string)</entry>
              </row>
              <row>
                <entry>array</entry>
                <entry>FLATTEN(TOKENS(element) for each element in array<p>(Concatenation of element
                    tokens)</p></entry>
              </row>
              <row>
                <entry>object</entry>
                <entry>For each name-value pair, name+TOKENS(value)</entry>
              </row>
            </tbody>
          </tgroup>
        </table></p>
      <p>You can specify the following options: <ul id="ul_hy4_jhg_gy">
          <li><b>names</b>: Optional. By default, this is set to true and
              <codeph>TOKENS(expr)</codeph> will include field names. You can choose to not include
            field names by setting this option to false, such as <codeph>TOKENS(expr,
              FALSE)</codeph>.</li>
          <li><b>case</b>: Optional. specify the case sensitivity as <userinput>lower </userinput>or
              <userinput>upper</userinput>.
            <codeblock spectitle="Examples">SELECT  TOKENS( expr,
{ "names" : true, "case" : "lower" }
);

SELECT TOKENS( expr,
{ "case" : "lower" }
);

SELECT TOKENS( expr,
{ "names" : false }
)

SELECT TOKENS( expr );</codeblock></li>
          <li><b>specials</b>:Optional. Use this option to preserve strings with specials
            characters, such as email addresses, URLs, and hyphenated phone numbers. The default
            value is false.</li>
        </ul></p>
      <codeblock spectitle="Examples">SELECT TOKENS( ['jim@abc.com, kim@abc.com, http://abc.com/, 408-555-1212'],
{ 'specials': false });
[
  {
    "$1": [
      "kim",
      "408",
      "com",
      "abc",
      "jim",
      "1212",
      "555",
      "http"
    ]
  }
]

SELECT TOKENS(['jim@abc.com, kim@abc.com, http://abc.com/, 408-555-1212'],
{ 'specials': true });
[
  {
    "$1": [
      "jim",
      "408",
      "1212",
      "jim@abc.com",
      "http",
      "abc",
      "408-555-1212",
      "kim@abc.com",
      "kim",
      "555",
      "http://abc.com",
      "com"
    ]
  }
]</codeblock>
    </section>
    <section id="fn-str-trim"><title>TRIM(expression [, characters ])</title>
      <p>Returns string with all leading and trailing chars removed. White space by default.</p>
    </section>
    <section id="fn-str-upper"><title>UPPER(expression)</title>
      <p>Returns uppercase of the string value.</p>
      <p>The following example shows the use of a LOWER string function.</p>
      <codeblock>SELECT product
        FROM product
        UNNEST product.categories as categories
        WHERE LOWER(categories) = "appliances"   </codeblock>
    </section>    
    </conbody></concept>
